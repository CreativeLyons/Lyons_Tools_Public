Group {
 name ID_Extractor
 tile_color 0x3d3d3dff
 label "<big><font color=\"white\">\[value Achannels]\n<font color=\"Red\">\[value Red]\n<font color=\"Green\">\[value Green]\n<font color=\"royal blue\">\[value Blue]"
 note_font "Verdana Bold"
 note_font_color 0xb8d2dfff
 selected true
 addUserKnob {20 ID_Extract}
 addUserKnob {41 Achannels l "ID channel" t "Pick the layer you want to extract from" T ID2.Achannels}
 addUserKnob {26 text l " " T "<font color = gray>Name your channels something:"}
 addUserKnob {1 Red l "<font color = orangered>Red" t "Enter a name for your red channel"}
 addUserKnob {1 Green l "<font color = limegreen>Green" t "Enter a name for your green channel"}
 addUserKnob {1 Blue l "<font color = dodgerblue>Blue" t "Enter a name for your blue channel"}
 addUserKnob {26 text_1 l " " T "<font color = gray>Extract your channels into Stamps:"}
 addUserKnob {22 extractRed l "<font color = orangered>Extract Red" t "Extract Red Channel into Stamp" T "import stamps\n\nn = nuke.thisNode()\nnxpos = n.xpos()\nnypos = n.ypos()\nchannelName = n\['Red'].value()\nchannelNameNoSpace = channelName.replace(\" \", \"_\")\n\nif channelName != '':   \n    n.end()\n    n.setSelected(True)\n    \n    dependents = n.dependent()\n    shuffles = \[]\n    for node in dependents:\n        if node.Class() == \"Shuffle\":\n            shuffles.append(node)\n            \n    shuffleNames = \[]\n    for shuffle in shuffles:\n        shuffleNames.append(shuffle.name())\n    \n    if channelNameNoSpace not in shuffleNames:\n        s = nuke.nodes.Shuffle(name=channelNameNoSpace)\n        s.setXYpos(int(nxpos-100),int(nypos+110))\n        s.autoplace()\n        s.setInput(0,n)##################\n        matte = 1\n        s\['tile_color'].setValue(2466250752L)\n        s\['red'].setValue(matte)\n        s\['green'].setValue(matte)\n        s\['blue'].setValue(matte)\n        s\['alpha'].setValue(matte)\n        s\['note_font_size'].setValue(12)\n        s\['note_font_color'].setValue(4294967040)\n        \n        n.setSelected(False)\n        s.setSelected(True)\n        \n        stamps.anchor(title = channelName, tags = \"ID\", input_node = \"\", node_type = \"2D\")\n\nnukescripts.clear_selection_recursive()\nn.setSelected(True)" +STARTLINE}
 addUserKnob {22 extractGreen l " <font color = limegreen>Extract Green" t "Extract Blue Channel into Stamp" -STARTLINE T "import stamps\n\nn = nuke.thisNode()\nnxpos = n.xpos()\nnypos = n.ypos()\nchannelName = n\['Green'].value()\nchannelNameNoSpace = channelName.replace(\" \", \"_\")\n\nif channelName != '':\n    n.end()\n    n.setSelected(True)\n    \n    dependents = n.dependent()\n    shuffles = \[]\n    for node in dependents:\n        if node.Class() == \"Shuffle\":\n            shuffles.append(node)\n            \n    shuffleNames = \[]\n    for shuffle in shuffles:\n        shuffleNames.append(shuffle.name())\n\n    if channelNameNoSpace not in shuffleNames:\n        s = nuke.nodes.Shuffle(name=channelNameNoSpace)\n        s.setXYpos(int(nxpos),int(nypos+110))\n        s.autoplace()\n        s.setInput(0,n)##################\n        matte = 2\n        s\['tile_color'].setValue(1063467008L)\n        s\['red'].setValue(matte)\n        s\['green'].setValue(matte)\n        s\['blue'].setValue(matte)\n        s\['alpha'].setValue(matte)\n        s\['note_font_size'].setValue(12)\n        s\['note_font_color'].setValue(4294967040)\n        \n        n.setSelected(False)\n        s.setSelected(True)\n        \n        stamps.anchor(title = channelName, tags = \"ID\", input_node = \"\", node_type = \"2D\")\n     \n    \nnukescripts.clear_selection_recursive()\nn.setSelected(True)"}
 addUserKnob {22 extractBlue l "<font color = dodgerblue>Extract Blue" t "Extract Blue Channel into Stamp" -STARTLINE T "import stamps\n\nn = nuke.thisNode()\nnxpos = n.xpos()\nnypos = n.ypos()\nchannelName = n\['Blue'].value()\nchannelNameNoSpace = channelName.replace(\" \", \"_\")\n\nif channelName != '':\n    n.end()\n    n.setSelected(True)\n    \n    dependents = n.dependent()\n    shuffles = \[]\n    for node in dependents:\n        if node.Class() == \"Shuffle\":\n            shuffles.append(node)\n            \n    shuffleNames = \[]\n    for shuffle in shuffles:\n        shuffleNames.append(shuffle.name())\n\n    if channelNameNoSpace not in shuffleNames:\n        s = nuke.nodes.Shuffle(name=channelNameNoSpace)\n        s.setXYpos(int(nxpos+100),int(nypos+110))\n        s.autoplace()\n        s.setInput(0,n)##################\n        matte = 3\n        s\['tile_color'].setValue(1027575296L)\n        s\['red'].setValue(matte)\n        s\['green'].setValue(matte)\n        s\['blue'].setValue(matte)\n        s\['alpha'].setValue(matte)\n        s\['note_font_size'].setValue(12)\n        s\['note_font_color'].setValue(4294967040)\n        \n        n.setSelected(False)\n        s.setSelected(True)\n        \n        stamps.anchor(title = channelName, tags = \"ID\", input_node = \"\", node_type = \"2D\")\n\nnukescripts.clear_selection_recursive()\nn.setSelected(True)"}
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {22 extractAll l "<big><font color = limegreen>Extract All" t "Extract all 3 Channels at once" T "n = nuke.thisNode()\n\nred = n.knob('Red')\nredName = red.value()\ngreen = n.knob('Green')\ngreenName = green.value()\nblue = n.knob('Blue')\nblueName = blue.value()\n\ndependents = n.dependent()\nshuffles = \[]\nfor node in dependents:\n    if node.Class() == \"Shuffle\":\n        shuffles.append(node)\n        \nshuffleNames = \[]\nfor shuffle in shuffles:\n    shuffleNames.append(shuffle.name())\n\nif redName != \"\":\n    if redName.replace(\" \", \"_\") not in shuffleNames:\n        n.knob(\"extractRed\").execute()\nif greenName != \"\":\n    if greenName.replace(\" \", \"_\") not in shuffleNames:\n        n.knob(\"extractGreen\").execute()\nif blue.value() != \"\":\n    if blueName.replace(\" \", \"_\") not in shuffleNames:\n        n.knob(\"extractBlue\").execute()\n\nnukescripts.clear_selection_recursive()\nn.setSelected(True)" +STARTLINE}
 addUserKnob {22 set l "<big><font color = skyblue>Set Names" t "Reset the names of Existing Stamp outputs" -STARTLINE T "n = nuke.thisNode()\nredName = n.knob('Red').value()\ngreenName = n.knob('Green').value()\nblueName = n.knob('Blue').value()\nnewName_list = \[redName,greenName,blueName]\n\nfor node in n.dependent():\n    if node.Class() == 'Shuffle':\n        for newName in newName_list:\n            if newName != \"\":\n                matte = newName_list.index(newName) + 1\n                if node.knob('red').getValue() == matte and node.knob('green').getValue() == matte and node.knob('blue').getValue() == matte and node.knob('alpha').getValue() == matte:\n                    shuffle = nuke.toNode(node.name())\n                    shuffle.setName(newName)\n                    nextDep = node.dependent()\n                    \n                    for anchor in nextDep:\n                        if anchor.Class() == 'NoOp':\n                            if anchor.input(0).Class() == \"Shuffle\":\n                                if 'title' in anchor.knobs():\n                                    anchorTitle = anchor.knob('title')\n                                    if anchorTitle.value() != newName:\n                                        anchorTitle.setValue(newName)"}
 addUserKnob {22 reset l "<font color = orange><big>Clear Names" t "Clear all 3 name text input fields" -STARTLINE T "n = nuke.thisNode()\nn.knob('Red').setValue('')\nn.knob('Green').setValue('')\nn.knob('Blue').setValue('')"}
}
 Input {
  inputs 0
  name Input1
  xpos -576
  ypos -418
 }
 Dot {
  name Dot1
  xpos -542
  ypos -354
 }
set N6f32ac00 [stack 0]
push $N6f32ac00
 Dot {
  name Dot2
  xpos -667
  ypos -354
 }
 Remove {
  name Remove1
  xpos -701
  ypos -209
 }
 Merge2 {
  inputs 2
  Achannels rgb
  Bchannels none
  output rgb
  name ID2
  tile_color 0xffffffff
  label "R=\[value Red]\nG=\[value Green]\nB=\[value Blue]\nframe \[value postage_stamp_frame]"
  note_font_size 15
  xpos -576
  ypos -234
  postage_stamp_frame 1001
 }
 Output {
  name Output1
  xpos -576
  ypos -124
 }
end_group
